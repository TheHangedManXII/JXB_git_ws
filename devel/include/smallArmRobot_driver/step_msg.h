// Generated by gencpp from file smallArmRobot_driver/step_msg.msg
// DO NOT EDIT!


#ifndef SMALLARMROBOT_DRIVER_MESSAGE_STEP_MSG_H
#define SMALLARMROBOT_DRIVER_MESSAGE_STEP_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smallArmRobot_driver
{
template <class ContainerAllocator>
struct step_msg_
{
  typedef step_msg_<ContainerAllocator> Type;

  step_msg_()
    : Steps()  {
    }
  step_msg_(const ContainerAllocator& _alloc)
    : Steps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _Steps_type;
  _Steps_type Steps;





  typedef boost::shared_ptr< ::smallArmRobot_driver::step_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smallArmRobot_driver::step_msg_<ContainerAllocator> const> ConstPtr;

}; // struct step_msg_

typedef ::smallArmRobot_driver::step_msg_<std::allocator<void> > step_msg;

typedef boost::shared_ptr< ::smallArmRobot_driver::step_msg > step_msgPtr;
typedef boost::shared_ptr< ::smallArmRobot_driver::step_msg const> step_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smallArmRobot_driver::step_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smallArmRobot_driver::step_msg_<ContainerAllocator1> & lhs, const ::smallArmRobot_driver::step_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Steps == rhs.Steps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smallArmRobot_driver::step_msg_<ContainerAllocator1> & lhs, const ::smallArmRobot_driver::step_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smallArmRobot_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smallArmRobot_driver::step_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smallArmRobot_driver::step_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smallArmRobot_driver::step_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f848ce10d6e93faa8d4adf474668aef3";
  }

  static const char* value(const ::smallArmRobot_driver::step_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf848ce10d6e93faaULL;
  static const uint64_t static_value2 = 0x8d4adf474668aef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smallArmRobot_driver/step_msg";
  }

  static const char* value(const ::smallArmRobot_driver::step_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] Steps\n"
"\n"
;
  }

  static const char* value(const ::smallArmRobot_driver::step_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Steps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct step_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smallArmRobot_driver::step_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smallArmRobot_driver::step_msg_<ContainerAllocator>& v)
  {
    s << indent << "Steps[]" << std::endl;
    for (size_t i = 0; i < v.Steps.size(); ++i)
    {
      s << indent << "  Steps[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.Steps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMALLARMROBOT_DRIVER_MESSAGE_STEP_MSG_H
